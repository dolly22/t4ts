/****************************************************************************
  Generated by T4TS.tt - don't make any changes in this file
****************************************************************************/

// -- Begin global interfaces
    /** Generated from T4TS.Example.Models.Barfoo **/
    /**  Barfoo has some comments!
    * var bar = new Barfoo(); */
    interface Barfoo {
        /**  Well, this is a number
        * And has multiple lines of comment
        * "Nicely" formated */
        Number: number;
        /**  Okay, this has a single line of comment */
        Complex: T4TS.OverridenName;
        Name: string;
        DateTime: string;
        aValue: { [name: string]: any};
    }
// -- End global interfaces

declare module External1 {
    /** Generated from T4TS.Example.Models.ModelFromDifferentProject.TestEnum **/
    export module ModelFromDifferentProject {
        /**  Comment for enum */
    const enum TestEnum {
            TheItem1 = 1,
            /**  Comment for enum value */
            Item2 = 2,
            Item21 = 3,
            Item22 = 4,
            Item23 = 5,
            Item3 = 5,
            Item4 = 6,
        }
    }
    /** Generated from T4TS.Example.Models.ModelFromDifferentProject.SubClass **/
    export module ModelFromDifferentProject {
        export interface TestSubClass {
            Id: number;
            Name: string;
        }
    }
    /** Generated from T4TS.Example.Models.ModelFromDifferentProject **/
    export interface ModelFromDifferentProject {
        Id: number;
        Name: string;
        Date: string;
        DatesList: string[];
        DatesArray: string[];
        RefObject: any;
        IntArray: number[];
        SelfArray: External1.ModelFromDifferentProject[];
        IsVisible: boolean;
        IsOptional?: boolean;
        IntOptional?: number;
        Self: External1.ModelFromDifferentProject;
        EnumProp: External1.ModelFromDifferentProject.TestEnum;
        EnumPropNull?: External1.ModelFromDifferentProject.TestEnum;
        EnumArray: External1.ModelFromDifferentProject.TestEnum[];
        SubClassRef: External1.ModelFromDifferentProject.TestSubClass;
    }
}

declare module Fooz {
    /** Generated from T4TS.Example.Models.Foobar **/
    export interface IFoobar {
        OverrideAll?: any;
        AGuid: string;
        Recursive: Fooz.IFoobar;
        NullableInt?: number;
        NullableDouble?: number;
        NestedObjectArr: Barfoo[];
        NestedObjectList: Barfoo[];
        TwoDimensions: string[][];
        ThreeDimensions: Barfoo[][][];
        camelCasePlease: number;
        DoNotIgnoreMe: number;
    }
}

declare module T4TS {
    /** Generated from T4TS.Example.Models.InheritanceTest1 **/
    export interface InheritanceTest1 extends Barfoo {
        SomeString: string;
        Recursive: Fooz.IFoobar;
    }
    /** Generated from T4TS.Example.Models.InheritanceTest2 **/
    export interface InheritanceTest2 extends T4TS.InheritanceTest1 {
        SomeString2: string;
        Recursive2: Fooz.IFoobar;
    }
    /** Generated from T4TS.Example.Models.InheritanceTest3 **/
    export interface InheritanceTest3 extends T4TS.OverridenName {
        SomeString3: string;
        Recursive3: Fooz.IFoobar;
    }
    /** Generated from T4TS.Example.Models.InheritanceTest4 **/
    export interface InheritanceTest4 {
        SomeString4: string;
        Recursive4: Fooz.IFoobar;
    }
    /** Generated from T4TS.Example.Models.InheritanceTestExternal **/
    export interface InheritanceTestExternal extends External1.ModelFromDifferentProject {
    }
    /** Generated from T4TS.Example.Models.Inherited **/
    export interface OverridenName {
        OtherName?: string;
        Integers: number[];
        Doubles: number[];
        TwoDimList: number[][];
        [index: number]: Barfoo;
    }
    /** Generated from T4TS.Example.Models.Partial **/
    export interface Partial {
        FromSecondClass: string;
        AlsoSecondClass?: boolean;
    }
    /** Generated from T4TS.Example.Models.SimpleTest **/
    export interface SimpleTest {
        Public: number;
        Protected: number;
        Internal: number;
        Private: number;
        PublicStatic: number;
    }
}
