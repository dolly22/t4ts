using Microsoft.VisualStudio.TestTools.UnitTesting;
using T4TS.Example.Models;
using T4TS.Tests.Fixtures.Basic;
using T4TS.Tests.Utils;

namespace T4TS.Tests.Fixtures.Partial
{
    [TestClass]
    public class Test
    {
        [TestMethod]
        public void PartialModelHasExpectedOutput()
        {
            // Expect
            new OutputFor(
                typeof(PartialModel),
                typeof(ModelFromDifferentProject),
                typeof(BasicModel)
            ).ToEqual(ExpectedOutput);
        }

const string ExpectedOutput = @"
/****************************************************************************
  Generated by T4TS.tt - don't make any changes in this file
****************************************************************************/

declare module External1 {
    /** Generated from T4TS.Example.Models.ModelFromDifferentProject **/
    export interface ModelFromDifferentProject {
        Id: number;
        Name: string;
        Date: string;
        DatesList: string[];
        DatesArray: string[];
        RefObject: any;
        IntArray: number[];
        SelfArray: External1.ModelFromDifferentProject[];
        IsVisible: boolean;
        IsOptional: boolean;
        IntOptional: number;
        Self: External1.ModelFromDifferentProject;
        EnumProp: any;
        EnumPropNull: any;
        EnumArray: any[];
    }
}

declare module T4TS {
    /** Generated from T4TS.Tests.Fixtures.Partial.PartialModel **/
    export interface PartialModel extends External1.ModelFromDifferentProject {
        OnPartialModel: T4TS.BasicModel;
        OnOtherPartialModel: T4TS.BasicModel;
    }
    /** Generated from T4TS.Tests.Fixtures.Basic.BasicModel **/
    export interface BasicModel {
        MyProperty: number;
        SomeDateTime: string;
    }
}
";

    }
}
